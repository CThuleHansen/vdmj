##########################################################################################
# The class mapping definition for the VDMJ Type Checker. See ClassMapper.
##########################################################################################

# definitions
package com.fujitsu.vdmj.ast.definitions to com.fujitsu.vdmj.tc.definitions;
map ASTDefinitionList{} to TCDefinitionList(this);
map ASTAccessSpecifier{isStatic, isAsync, access, isPure} to TCAccessSpecifier(isStatic, isAsync, access, isPure);
map ASTAssignmentDefinition{accessSpecifier, name, type, expression} to TCAssignmentDefinition(accessSpecifier, name, type, expression);
map ASTBUSClassDefinition{name, supernames, definitions} to TCBUSClassDefinition(name, supernames, definitions);
map ASTClassDefinition{name, supernames, definitions} to TCClassDefinition(name, supernames, definitions);
map ASTClassInvariantDefinition{accessSpecifier, name, expression} to TCClassInvariantDefinition(accessSpecifier, name, expression);
map ASTClassList{} to TCClassList(this);
map ASTCPUClassDefinition{name, supernames, definitions} to TCCPUClassDefinition(name, supernames, definitions);
map ASTDefinition{} to TCDefinition();
map ASTDefinitionSet{} to TCDefinitionSet();
map ASTEqualsDefinition{location, pattern, typebind, bind, test} to TCEqualsDefinition(location, pattern, typebind, bind, test);
map ASTExplicitFunctionDefinition{accessSpecifier, name, typeParams, type, paramPatternList, body, precondition, postcondition, isTypeInvariant, measure} to TCExplicitFunctionDefinition(accessSpecifier, name, typeParams, type, paramPatternList, body, precondition, postcondition, isTypeInvariant, measure);
map ASTExplicitOperationDefinition{accessSpecifier, name, type, parameterPatterns, precondition, postcondition, body} to TCExplicitOperationDefinition(accessSpecifier, name, type, parameterPatterns, precondition, postcondition, body);
map ASTExternalDefinition{state, readOnly} to TCExternalDefinition(state, readOnly);
map ASTImplicitFunctionDefinition{accessSpecifier, name, typeParams, parameterPatterns, result, body, precondition, postcondition, measureExp} to TCImplicitFunctionDefinition(accessSpecifier, name, typeParams, parameterPatterns, result, body, precondition, postcondition, measureExp);
map ASTImplicitOperationDefinition{accessSpecifier, name, parameterPatterns, result, body, externals, precondition, postcondition, errors} to TCImplicitOperationDefinition(accessSpecifier, name, parameterPatterns, result, body, externals, precondition, postcondition, errors);
map ASTImportedDefinition{location, def} to TCImportedDefinition(location, def);
map ASTInheritedDefinition{accessSpecifier, name, superdef} to TCInheritedDefinition(accessSpecifier, name, superdef);
map ASTInstanceVariableDefinition{accessSpecifier, name, type, expression} to TCInstanceVariableDefinition(accessSpecifier, name, type, expression);
map ASTLocalDefinition{location, name, type} to TCLocalDefinition(location, name, type);
map ASTMultiBindListDefinition{location, bindings} to TCMultiBindListDefinition(location, bindings);
map ASTMutexSyncDefinition{location, operations} to TCMutexSyncDefinition(location, operations);
map ASTNamedTraceDefinition{location, name, terms} to TCNamedTraceDefinition(location, name, terms);
map ASTPerSyncDefinition{location, opname, guard} to TCPerSyncDefinition(location, opname, guard);
map ASTRenamedDefinition{name, def} to TCRenamedDefinition(name, def);
map ASTStateDefinition{name, fields, invPattern, invExpression, initPattern, initExpression} to TCStateDefinition(name, fields, invPattern, invExpression, initPattern, initExpression);
map ASTSystemDefinition{name, definitions} to TCSystemDefinition(name, definitions);
map ASTThreadDefinition{statement} to TCThreadDefinition(statement);
map ASTTypeDefinition{accessSpecifier, name, type, invPattern, invExpression, eqPattern1, eqPattern2, eqExpression, ordPattern1, ordPattern2, ordExpression} to TCTypeDefinition(accessSpecifier, name, type, invPattern, invExpression, eqPattern1, eqPattern2, eqExpression, ordPattern1, ordPattern2, ordExpression);
map ASTUntypedDefinition{location, name} to TCUntypedDefinition(location, name);
map ASTValueDefinition{accessSpecifier, pattern, type, exp} to TCValueDefinition(accessSpecifier, pattern, type, exp);

# expressions
package com.fujitsu.vdmj.ast.expressions to com.fujitsu.vdmj.tc.expressions;
map ASTExpression{} to TCExpression();
map ASTExpressionList{} to TCExpressionList(this);
map ASTAbsoluteExpression{location, exp} to TCAbsoluteExpression(location, exp);
map ASTAndExpression{left, op, right} to TCAndExpression(left, op, right);
map ASTApplyExpression{root, args} to TCApplyExpression(root, args);
map ASTBinaryExpression{} to TCBinaryExpression();
map ASTBooleanBinaryExpression{} to TCBooleanBinaryExpression();
map ASTBooleanLiteralExpression{value} to TCBooleanLiteralExpression(value);
map ASTCardinalityExpression{location, exp} to TCCardinalityExpression(location, exp);
map ASTCaseAlternative{cexp, pattern, result} to TCCaseAlternative(cexp, pattern, result);
map ASTCaseAlternativeList{} to TCCaseAlternativeList(this);
map ASTCasesExpression{location, exp, cases, others} to TCCasesExpression(location, exp, cases, others);
map ASTCharLiteralExpression{value} to TCCharLiteralExpression(value);
map ASTCompExpression{left, op, right} to TCCompExpression(left, op, right);
map ASTDefExpression{location, localDefs, expression} to TCDefExpression(location, localDefs, expression);
map ASTDistConcatExpression{location, exp} to TCDistConcatExpression(location, exp);
map ASTDistIntersectExpression{location, exp} to TCDistIntersectExpression(location, exp);
map ASTDistMergeExpression{location, exp} to TCDistMergeExpression(location, exp);
map ASTDistUnionExpression{location, exp} to TCDistUnionExpression(location, exp);
map ASTDivExpression{left, op, right} to TCDivExpression(left, op, right);
map ASTDivideExpression{left, op, right} to TCDivideExpression(left, op, right);
map ASTDomainResByExpression{left, op, right} to TCDomainResByExpression(left, op, right);
map ASTDomainResToExpression{left, op, right} to TCDomainResToExpression(left, op, right);
map ASTElementsExpression{location, exp} to TCElementsExpression(location, exp);
map ASTElseIfExpression{location, elseIfExp, thenExp} to TCElseIfExpression(location, elseIfExp, thenExp);
map ASTElseIfExpressionList{} to TCElseIfExpressionList(this);
map ASTEqualsExpression{left, op, right} to TCEqualsExpression(left, op, right);
map ASTEquivalentExpression{left, op, right} to TCEquivalentExpression(left, op, right);
map ASTExists1Expression{location, bind, predicate} to TCExists1Expression(location, bind, predicate);
map ASTExistsExpression{location, bindList, predicate} to TCExistsExpression(location, bindList, predicate);
map ASTFieldExpression{object, field, memberName} to TCFieldExpression(object, field, memberName);
map ASTFieldNumberExpression{tuple, field} to TCFieldNumberExpression(tuple, field);
map ASTFloorExpression{location, exp} to TCFloorExpression(location, exp);
map ASTForAllExpression{location, bindList, predicate} to TCForAllExpression(location, bindList, predicate);
map ASTFuncInstantiationExpression{function, actualTypes} to TCFuncInstantiationExpression(function, actualTypes);
map ASTGreaterEqualExpression{left, op, right} to TCGreaterEqualExpression(left, op, right);
map ASTGreaterExpression{left, op, right} to TCGreaterExpression(left, op, right);
map ASTHeadExpression{location, exp} to TCHeadExpression(location, exp);
map ASTHistoryExpression{location, hop, opnames} to TCHistoryExpression(location, hop, opnames);
map ASTIfExpression{location, ifExp, thenExp, elseList, elseExp} to TCIfExpression(location, ifExp, thenExp, elseList, elseExp);
map ASTImpliesExpression{left, op, right} to TCImpliesExpression(left, op, right);
map ASTIndicesExpression{location, exp} to TCIndicesExpression(location, exp);
map ASTInSetExpression{left, op, right} to TCInSetExpression(left, op, right);
map ASTIntegerLiteralExpression{value} to TCIntegerLiteralExpression(value);
map ASTIotaExpression{location, bind, predicate} to TCIotaExpression(location, bind, predicate);
map ASTIsExpression{location, typename, basictype, test} to TCIsExpression(location, typename, basictype, test);
map ASTIsOfBaseClassExpression{location, baseclass, exp} to TCIsOfBaseClassExpression(location, baseclass, exp);
map ASTIsOfClassExpression{location, classname, exp} to TCIsOfClassExpression(location, classname, exp);
map ASTLambdaExpression{location, bindList, expression} to TCLambdaExpression(location, bindList, expression);
map ASTLenExpression{location, exp} to TCLenExpression(location, exp);
map ASTLessEqualExpression{left, op, right} to TCLessEqualExpression(left, op, right);
map ASTLessExpression{left, op, right} to TCLessExpression(left, op, right);
map ASTLetBeStExpression{location, bind, suchThat, value} to TCLetBeStExpression(location, bind, suchThat, value);
map ASTLetDefExpression{location, localDefs, expression} to TCLetDefExpression(location, localDefs, expression);
map ASTMapCompExpression{location, first, bindings, predicate} to TCMapCompExpression(location, first, bindings, predicate);
map ASTMapDomainExpression{location, exp} to TCMapDomainExpression(location, exp);
map ASTMapEnumExpression{location, members} to TCMapEnumExpression(location, members);
map ASTMapExpression{} to TCMapExpression();
map ASTMapInverseExpression{location, exp} to TCMapInverseExpression(location, exp);
map ASTMapletExpression{left, right} to TCMapletExpression(left, right);
map ASTMapletExpressionList{} to TCMapletExpressionList(this);
map ASTMapRangeExpression{location, exp} to TCMapRangeExpression(location, exp);
map ASTMapUnionExpression{left, op, right} to TCMapUnionExpression(left, op, right);
map ASTMkBasicExpression{type, arg} to TCMkBasicExpression(type, arg);
map ASTMkTypeExpression{typename, args} to TCMkTypeExpression(typename, args);
map ASTModExpression{left, op, right} to TCModExpression(left, op, right);
map ASTMuExpression{location, record, modifiers} to TCMuExpression(location, record, modifiers);
map ASTNarrowExpression{location, typename, basictype, test} to TCNarrowExpression(location, typename, basictype, test);
map ASTNewExpression{location, classname, args} to TCNewExpression(location, classname, args);
map ASTNilExpression{location} to TCNilExpression(location);
map ASTNotEqualExpression{left, op, right} to TCNotEqualExpression(left, op, right);
map ASTNotExpression{location, exp} to TCNotExpression(location, exp);
map ASTNotInSetExpression{left, op, right} to TCNotInSetExpression(left, op, right);
map ASTNotYetSpecifiedExpression{location} to TCNotYetSpecifiedExpression(location);
map ASTNumericBinaryExpression{} to TCNumericBinaryExpression();
map ASTOrExpression{left, op, right} to TCOrExpression(left, op, right);
map ASTPlusExpression{left, op, right} to TCPlusExpression(left, op, right);
map ASTPlusPlusExpression{left, op, right} to TCPlusPlusExpression(left, op, right);
map ASTPostOpExpression{opname, preexpression, postexpression, errors, state} to TCPostOpExpression(opname, preexpression, postexpression, errors, state);
map ASTPowerSetExpression{location, exp} to TCPowerSetExpression(location, exp);
map ASTPreExpression{location, function, args} to TCPreExpression(location, function, args);
map ASTPreOpExpression{opname, expression, errors, state} to TCPreOpExpression(opname, expression, errors, state);
map ASTProperSubsetExpression{left, op, right} to TCProperSubsetExpression(left, op, right);
map ASTQuoteLiteralExpression{location, type} to TCQuoteLiteralExpression(location, type);
map ASTRangeResByExpression{left, op, right} to TCRangeResByExpression(left, op, right);
map ASTRangeResToExpression{left, op, right} to TCRangeResToExpression(left, op, right);
map ASTRealLiteralExpression{value} to TCRealLiteralExpression(value);
map ASTRecordModifier{tag, value} to TCRecordModifier(tag, value);
map ASTRecordModifierList{} to TCRecordModifierList(this);
map ASTRemExpression{left, op, right} to TCRemExpression(left, op, right);
map ASTReverseExpression{location, exp} to TCReverseExpression(location, exp);
map ASTSameBaseClassExpression{location, left, right} to TCSameBaseClassExpression(location, left, right);
map ASTSameClassExpression{location, left, right} to TCSameClassExpression(location, left, right);
map ASTSelfExpression{location} to TCSelfExpression(location);
map ASTSeqCompExpression{location, first, bind, predicate} to TCSeqCompExpression(location, first, bind, predicate);
map ASTSeqConcatExpression{left, op, right} to TCSeqConcatExpression(left, op, right);
map ASTSeqEnumExpression{location, members} to TCSeqEnumExpression(location, members);
map ASTSeqExpression{} to TCSeqExpression();
map ASTSetCompExpression{location, first, bindings, predicate} to TCSetCompExpression(location, first, bindings, predicate);
map ASTSetDifferenceExpression{left, op, right} to TCSetDifferenceExpression(left, op, right);
map ASTSetEnumExpression{location, members} to TCSetEnumExpression(location, members);
map ASTSetExpression{} to TCSetExpression();
map ASTSetIntersectExpression{left, op, right} to TCSetIntersectExpression(left, op, right);
map ASTSetRangeExpression{location, first, last} to TCSetRangeExpression(location, first, last);
map ASTSetUnionExpression{left, op, right} to TCSetUnionExpression(left, op, right);
map ASTStarStarExpression{left, op, right} to TCStarStarExpression(left, op, right);
map ASTStateInitExpression{state} to TCStateInitExpression(state);
map ASTStringLiteralExpression{value} to TCStringLiteralExpression(value);
map ASTSubclassResponsibilityExpression{location} to TCSubclassResponsibilityExpression(location);
map ASTSubseqExpression{seq, from, to} to TCSubseqExpression(seq, from, to);
map ASTSubsetExpression{left, op, right} to TCSubsetExpression(left, op, right);
map ASTSubtractExpression{left, op, right} to TCSubtractExpression(left, op, right);
map ASTTailExpression{location, exp} to TCTailExpression(location, exp);
map ASTThreadIdExpression{location} to TCThreadIdExpression(location);
map ASTTimeExpression{location} to TCTimeExpression(location);
map ASTTimesExpression{left, op, right} to TCTimesExpression(left, op, right);
map ASTTupleExpression{location, args} to TCTupleExpression(location, args);
map ASTUnaryExpression{} to TCUnaryExpression();
map ASTUnaryMinusExpression{location, exp} to TCUnaryMinusExpression(location, exp);
map ASTUnaryPlusExpression{location, exp} to TCUnaryPlusExpression(location, exp);
map ASTUndefinedExpression{location} to TCUndefinedExpression(location);
map ASTVariableExpression{location, name, original} to TCVariableExpression(location, name, original);

# lex
package com.fujitsu.vdmj.ast.lex to com.fujitsu.vdmj.tc.lex;
map LexNameToken{} to TCNameToken(this);
map LexNameList{} to TCNameList(this);
map LexIdentifierToken{} to TCIdentifierToken(this);
unmapped com.fujitsu.vdmj.ast.lex.LexIntegerToken;
unmapped com.fujitsu.vdmj.ast.lex.LexBooleanToken;
unmapped com.fujitsu.vdmj.ast.lex.LexCharacterToken;
unmapped com.fujitsu.vdmj.ast.lex.LexIntegerToken;
unmapped com.fujitsu.vdmj.ast.lex.LexKeywordToken;
unmapped com.fujitsu.vdmj.ast.lex.LexQuoteToken;
unmapped com.fujitsu.vdmj.ast.lex.LexRealToken;
unmapped com.fujitsu.vdmj.ast.lex.LexStringToken;
unmapped com.fujitsu.vdmj.lex.LexLocation;
unmapped com.fujitsu.vdmj.lex.Token;

# modules
package com.fujitsu.vdmj.ast.modules to com.fujitsu.vdmj.tc.modules;
map ASTModuleList{} to TCModuleList(this);
map ASTExportList{} to TCExportList(this);
map ASTImportList{} to TCImportList(this);
map ASTModule{name, imports, exports, defs, files, isFlat} to TCModule(name, imports, exports, defs, files, isFlat);
map ASTModuleImports{name, imports} to TCModuleImports(name, imports);
map ASTModuleExports{exports} to TCModuleExports(exports);
map ASTExport{} to TCExport();
map ASTExportAll{location} to TCExportAll(location);
map ASTExportedFunction{location, nameList, type, typeParams} to TCExportedFunction(location, nameList, type, typeParams);
map ASTExportedOperation{location, nameList, type} to TCExportedOperation(location, nameList, type);
map ASTExportedType{name, struct} to TCExportedType(name, struct);
map ASTExportedValue{location, nameList, type} to TCExportedValue(location, nameList, type);
map ASTImport{} to TCImport();
map ASTImportAll{name} to TCImportAll(name);
map ASTImportedFunction{name, type, typeParams, renamed} to TCImportedFunction(name, type, typeParams, renamed);
map ASTImportedOperation{name, type, renamed} to TCImportedOperation(name, type, renamed);
map ASTImportedType{name, def, renamed} to TCImportedType(name, def, renamed);
map ASTImportedValue{name, type, renamed} to TCImportedValue(name, type, renamed);
map ASTImportFromModule{name, signatures} to TCImportFromModule(name, signatures);
map ASTImportFromModuleList{} to TCImportFromModuleList(this);


# patterns
package com.fujitsu.vdmj.ast.patterns to com.fujitsu.vdmj.tc.patterns;
map ASTBind{} to TCBind();
map ASTBooleanPattern{value} to TCBooleanPattern(value);
map ASTCharacterPattern{value} to TCCharacterPattern(value);
map ASTConcatenationPattern{left, location, right} to TCConcatenationPattern(left, location, right);
map ASTExpressionPattern{exp} to TCExpressionPattern(exp);
map ASTIdentifierPattern{name} to TCIdentifierPattern(name);
map ASTIgnorePattern{location} to TCIgnorePattern(location);
map ASTIntegerPattern{value} to TCIntegerPattern(value);
map ASTMapletPattern{from, to} to TCMapletPattern(from, to);
map ASTMapletPatternList{} to TCMapletPatternList(this);
map ASTMapPattern{location, maplets} to TCMapPattern(location, maplets);
map ASTMapUnionPattern{left, location, right} to TCMapUnionPattern(left, location, right);
map ASTMultipleBind{} to TCMultipleBind();
map ASTMultipleBindList{} to TCMultipleBindList(this);
map ASTMultipleSeqBind{plist, sequence} to TCMultipleSeqBind(plist, sequence);
map ASTMultipleSetBind{plist, set} to TCMultipleSetBind(plist, set);
map ASTMultipleTypeBind{plist, type} to TCMultipleTypeBind(plist, type);
map ASTNamePatternPair{name, pattern} to TCNamePatternPair(name, pattern);
map ASTNamePatternPairList{} to TCNamePatternPairList();
map ASTNilPattern{location} to TCNilPattern(location);
map ASTObjectPattern{location, classname, fieldlist} to TCObjectPattern(location, classname, fieldlist);
map ASTPattern{} to TCPattern();
map ASTPatternList{} to TCPatternList(this);
map ASTPatternListList{} to TCPatternListList(this);
map ASTPatternBind{location, pattern, bind} to TCPatternBind(location, pattern, bind);
map ASTQuotePattern{value} to TCQuotePattern(value);
map ASTRealPattern{value} to TCRealPattern(value);
map ASTRecordPattern{typename, plist} to TCRecordPattern(typename, plist);
map ASTSeqBind{pattern, sequence} to TCSeqBind(pattern, sequence);
map ASTSeqPattern{location, plist} to TCSeqPattern(location, plist);
map ASTSetBind{pattern, set} to TCSetBind(pattern, set);
map ASTSetPattern{location, plist} to TCSetPattern(location, plist);
map ASTStringPattern{value} to TCStringPattern(value);
map ASTTuplePattern{location, plist} to TCTuplePattern(location, plist);
map ASTTypeBind{pattern, type} to TCTypeBind(pattern, type);
map ASTTypeBindList{} to TCTypeBindList(this);
map ASTUnionPattern{left, location, right} to TCUnionPattern(left, location, right);

# statements
package com.fujitsu.vdmj.ast.statements to com.fujitsu.vdmj.tc.statements;
map ASTAlwaysStatement{location, always, body} to TCAlwaysStatement(location, always, body);
map ASTAssignmentStatement{location, target, exp} to TCAssignmentStatement(location, target, exp);
map ASTAssignmentStatementList{} to TCAssignmentStatementList(this);
map ASTAtomicStatement{location, assignments} to TCAtomicStatement(location, assignments);
map ASTBlockStatement{location, assignmentDefs, statements} to TCBlockStatement(location, assignmentDefs, statements);
map ASTCallObjectStatement{designator, classname, fieldname, args} to TCCallObjectStatement(designator, classname, fieldname, args);
map ASTCallStatement{name, args} to TCCallStatement(name, args);
map ASTCasesStatement{location, exp, cases, others} to TCCasesStatement(location, exp, cases, others);
map ASTCaseStmtAlternative{pattern, statement} to TCCaseStmtAlternative(pattern, statement);
map ASTCaseStmtAlternativeList{} to TCCaseStmtAlternativeList(this);
map ASTClassInvariantStatement{name, invdefs} to TCClassInvariantStatement(name, invdefs);
map ASTCyclesStatement{location, cycles, statement} to TCCyclesStatement(location, cycles, statement);
map ASTDefStatement{location, localDefs, statement} to TCDefStatement(location, localDefs, statement);
map ASTDurationStatement{location, duration, statement} to TCDurationStatement(location, duration, statement);
map ASTElseIfStatement{location, elseIfExp, thenStmt} to TCElseIfStatement(location, elseIfExp, thenStmt);
map ASTElseIfStatementList{} to TCElseIfStatementList(this);
map ASTErrorCase{name, left, right} to TCErrorCase(name, left, right);
map ASTErrorCaseList{} to TCErrorCaseList(this);
map ASTErrorStatement{location} to TCErrorStatement(location);
map ASTExitStatement{location, expression} to TCExitStatement(location, expression);
map ASTExternalClause{mode, identifiers, type} to TCExternalClause(mode, identifiers, type);
map ASTExternalClauseList{} to TCExternalClauseList(this);
map ASTFieldDesignator{object, field} to TCFieldDesignator(object, field);
map ASTForAllStatement{location, pattern, set, statement} to TCForAllStatement(location, pattern, set, statement);
map ASTForIndexStatement{location, var, from, to, by, statement} to TCForIndexStatement(location, var, from, to, by, statement);
map ASTForPatternBindStatement{location, patternBind, reverse, exp, statement} to TCForPatternBindStatement(location, patternBind, reverse, exp, statement);
map ASTIdentifierDesignator{name} to TCIdentifierDesignator(name);
map ASTIfStatement{location, ifExp, thenStmt, elseList, elseStmt} to TCIfStatement(location, ifExp, thenStmt, elseList, elseStmt);
map ASTLetBeStStatement{location, bind, suchThat, statement} to TCLetBeStStatement(location, bind, suchThat, statement);
map ASTLetDefStatement{location, localDefs, statement} to TCLetDefStatement(location, localDefs, statement);
map ASTMapSeqDesignator{mapseq, exp} to TCMapSeqDesignator(mapseq, exp);
map ASTNonDeterministicStatement{location, statements} to TCNonDeterministicStatement(location, statements);
map ASTNotYetSpecifiedStatement{location} to TCNotYetSpecifiedStatement(location);
map ASTObjectApplyDesignator{object, args} to TCObjectApplyDesignator(object, args);
map ASTObjectDesignator{} to TCObjectDesignator();
map ASTObjectFieldDesignator{object, classname, fieldname} to TCObjectFieldDesignator(object, classname, fieldname);
map ASTObjectIdentifierDesignator{name} to TCObjectIdentifierDesignator(name);
map ASTObjectNewDesignator{expression} to TCObjectNewDesignator(expression);
map ASTObjectSelfDesignator{location} to TCObjectSelfDesignator(location);
map ASTPeriodicStatement{opname, args} to TCPeriodicStatement(opname, args);
map ASTReturnStatement{location, expression} to TCReturnStatement(location, expression);
map ASTSimpleBlockStatement{} to TCSimpleBlockStatement();
map ASTSkipStatement{location} to TCSkipStatement(location);
map ASTSpecificationStatement{location, externals, precondition, postcondition, errors} to TCSpecificationStatement(location, externals, precondition, postcondition, errors);
map ASTSporadicStatement{opname, args} to TCSporadicStatement(opname, args);
map ASTStartStatement{location, objects} to TCStartStatement(location, objects);
map ASTStateDesignator{} to TCStateDesignator();
map ASTStatement{} to TCStatement();
map ASTStatementList{} to TCStatementList(this);
map ASTStopStatement{location, objects} to TCStopStatement(location, objects);
map ASTSubclassResponsibilityStatement{location} to TCSubclassResponsibilityStatement(location);
map ASTTixeStatement{location, traps, body} to TCTixeStatement(location, traps, body);
map ASTTixeStmtAlternative{patternBind, statement} to TCTixeStmtAlternative(patternBind, statement);
map ASTTixeStmtAlternativeList{} to TCTixeStmtAlternativeList(this);
map ASTTrapStatement{location, patternBind, with, body} to TCTrapStatement(location, patternBind, with, body);
map ASTWhileStatement{location, exp, statement} to TCWhileStatement(location, exp, statement);

# traces
package com.fujitsu.vdmj.ast.traces to com.fujitsu.vdmj.tc.traces;
map ASTTraceApplyExpression{callStatement} to TCTraceApplyExpression(callStatement);
map ASTTraceBracketedExpression{location, terms} to TCTraceBracketedExpression(location, terms);
map ASTTraceConcurrentExpression{location, defs} to TCTraceConcurrentExpression(location, defs);
map ASTTraceCoreDefinition{} to TCTraceCoreDefinition();
map ASTTraceDefinition{} to TCTraceDefinition();
map ASTTraceDefinitionList{} to TCTraceDefinitionList(this);
map ASTTraceDefinitionTerm{} to TCTraceDefinitionTerm(this);
map ASTTraceDefinitionTermList{} to TCTraceDefinitionTermList(this);
map ASTTraceLetBeStBinding{location, bind, stexp, body} to TCTraceLetBeStBinding(location, bind, stexp, body);
map ASTTraceLetDefBinding{location, localDefs, body} to TCTraceLetDefBinding(location, localDefs, body);
map ASTTraceRepeatDefinition{location, core, to, from} to TCTraceRepeatDefinition(location, core, from, to);

# types
package com.fujitsu.vdmj.ast.types to com.fujitsu.vdmj.tc.types;
map ASTType{} to TCType();
map ASTTypeList{} to TCTypeList(this);
map ASTBasicType{} to TCBasicType();
map ASTBooleanType{location} to TCBooleanType(location);
map ASTBracketType{type} to TCBracketType(type);
map ASTCharacterType{location} to TCCharacterType(location);
map ASTClassType{location, classdef} to TCClassType(location, classdef);
map ASTField{tagname, tag, type, equalityAbstration} to TCField(tagname, tag, type, equalityAbstration);
map ASTFieldList{} to TCFieldList(this);
map ASTFunctionType{location, parameters, partial, result} to TCFunctionType(location, parameters, partial, result);
map ASTInMapType{location, from, to} to TCInMapType(location, from, to);
map ASTInvariantType{} to TCInvariantType();
map ASTMapType{location, from, to} to TCMapType(location, from, to);
map ASTNamedType{typename, type} to TCNamedType(typename, type);
map ASTNaturalOneType{location} to TCNaturalOneType(location);
map ASTNaturalType{location} to TCNaturalType(location);
map ASTIntegerType{location} to TCIntegerType(location);
map ASTNumericType{} to TCNumericType();
map ASTOperationType{location, parameters, result} to TCOperationType(location, parameters, result);
map ASTOptionalType{location, type} to TCOptionalType(location, type);
map ASTParameterType{name} to TCParameterType(name);
map ASTPatternListTypePair{patterns, type} to TCPatternListTypePair(patterns, type);
map ASTPatternListTypePairList{} to TCPatternListTypePairList(this);
map ASTPatternTypePair{pattern, type} to TCPatternTypePair(pattern, type);
map ASTProductType{location, types} to TCProductType(location, types);
map ASTQuoteType{location, value} to TCQuoteType(location, value);
map ASTRationalType{location} to TCRationalType(location);
map ASTRealType{location} to TCRealType(location);
map ASTRecordType{name, fields, composed} to TCRecordType(name, fields, composed);
map ASTSeq1Type{location, seqof} to TCSeq1Type(location, seqof);
map ASTSeqType{location, seqof} to TCSeqType(location, seqof);
map ASTSetType{location, setof} to TCSetType(location, setof);
map ASTSet1Type{location, setof} to TCSet1Type(location, setof);
map ASTTokenType{location} to TCTokenType(location);
map ASTTypeSet{} to TCTypeSet(this);
map ASTUndefinedType{location} to TCUndefinedType(location);
map ASTUnionType{location, types} to TCUnionType(location, types);
map ASTUnknownType{location} to TCUnknownType(location);
map ASTUnresolvedType{typename} to TCUnresolvedType(typename);
map ASTVoidReturnType{location} to TCVoidReturnType(location);
map ASTVoidType{location} to TCVoidType(location);

# Java - usually unmappeds
unmapped java.lang.Boolean;
unmapped java.lang.String;
unmapped java.lang.Long;
unmapped com.fujitsu.vdmj.mapper.FileList;
